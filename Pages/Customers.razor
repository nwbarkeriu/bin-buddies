@page "/customers"
@using BinBuddies.Models
@using BinBuddies.Services
@inject ICustomerService CustomerService
@inject IJSRuntime JSRuntime

<PageTitle>Customers</PageTitle>

<div class="container">
    <h1>Customer Management</h1>
    
    <div class="row mb-3">
        <div class="col-md-6">
            <button class="btn btn-primary" @onclick="ShowAddCustomerModal">Add New Customer</button>
        </div>
        <div class="col-md-6">
            <input class="form-control" type="text" placeholder="Search customers..." @bind="SearchTerm" @onkeyup="FilterCustomers" />
        </div>
    </div>

    @if (IsLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Address</th>
                        <th>Email</th>
                        <th>Phone</th>
                        <th>Trash Day</th>
                        <th>Account Rep</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var customer in FilteredCustomers)
                    {
                        <tr>
                            <td>@customer.Contact?.FullName</td>
                            <td>@customer.Contact?.Address</td>
                            <td>@customer.Contact?.Email</td>
                            <td>@customer.Contact?.Phone</td>
                            <td>@customer.TrashDay</td>
                            <td>@customer.AccountRepresentative</td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => EditCustomer(customer)">Edit</button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteCustomer(customer.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        @if (!FilteredCustomers.Any())
        {
            <div class="alert alert-info">
                No customers found.
            </div>
        }
    }
</div>

@code {
    private List<Customer> AllCustomers = new();
    private List<Customer> FilteredCustomers = new();
    private bool IsLoading = true;
    private string SearchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
    }

    private async Task LoadCustomers()
    {
        IsLoading = true;
        try
        {
            AllCustomers = await CustomerService.GetAllCustomersAsync();
            FilteredCustomers = AllCustomers;
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading customers: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void FilterCustomers()
    {
        if (string.IsNullOrWhiteSpace(SearchTerm))
        {
            FilteredCustomers = AllCustomers;
        }
        else
        {
            FilteredCustomers = AllCustomers.Where(c => 
                (c.Contact?.FullName?.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (c.Contact?.Address?.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (c.Contact?.Email?.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (c.AccountRepresentative?.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
            ).ToList();
        }
        StateHasChanged();
    }

    private void ShowAddCustomerModal()
    {
        // TODO: Implement modal for adding customer
        JSRuntime.InvokeVoidAsync("alert", "Add customer modal - To be implemented");
    }

    private void EditCustomer(Customer customer)
    {
        // TODO: Implement edit customer functionality
        JSRuntime.InvokeVoidAsync("alert", $"Edit customer {customer.Contact?.FullName} - To be implemented");
    }

    private async Task DeleteCustomer(int customerId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this customer?");
        if (confirmed)
        {
            try
            {
                var success = await CustomerService.DeleteCustomerAsync(customerId);
                if (success)
                {
                    await LoadCustomers();
                    await JSRuntime.InvokeVoidAsync("alert", "Customer deleted successfully!");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Failed to delete customer.");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting customer: {ex.Message}");
            }
        }
    }
}
